//go:build generate

package main

import (
	"github.com/go-git/go-git/v5"
	"github.com/go-git/go-git/v5/plumbing"
	"github.com/go-git/go-git/v5/plumbing/object"
	"os"
	"text/template"
)

//go:generate go run build.go
//go:generate go fmt ./...

const templateVersionFile = `// this file version.go was generated by build.go

package safelist

func GetVersion() *Version {
	return &Version{
		Version:    "{{.Version}}",
		CommitHash: "{{.CommitHash}}",
		Date:       "{{.Date}}",
	}
}

type Version struct {
	Version    string ` + "`json:\"version\"`" + `
	CommitHash string ` + "`json:\"commitHash\"`" + `
	Date       string ` + "`json:\"date\"`" + `
}
`

type Version struct {
	Version    string `json:"version"`
	CommitHash string `json:"commitHash"`
	Date       string `json:"date"`
}

var repo *git.Repository

func init() {
	var err error
	repo, err = git.PlainOpen(".") // open current dir
	if err != nil {
		panic(err)
	}
}

func getCommit() (*object.Commit, error) {
	ref, err := repo.Head()
	if err != nil {
		return nil, err
	}

	commit, err := repo.CommitObject(ref.Hash())
	if err != nil {
		return nil, err
	}

	return commit, nil
}

func getCommitHash() (string, error) {
	commit, err := getCommit()
	if err != nil {
		return "", err
	}

	return commit.Hash.String(), nil
}

func getDate() (string, error) {
	commit, err := getCommit()
	if err != nil {
		return "", err
	}

	return commit.Author.When.Format("2006-01-02T15:04:05Z"), nil
}

func getTag() (string, error) {
	tags, err := repo.Tags()
	if err != nil {
		return "", err
	}

	var tag string
	callback := func(ref *plumbing.Reference) error {
		if ref.Name().IsTag() {
			tag = ref.Name().Short()
		}
		return nil
	}

	if err = tags.ForEach(callback); err != nil {
		return "", err
	}
	if err != nil {
		return "", err
	}

	return tag, nil
}

func main() {
	tmpl, err := template.New("versionFile").Parse(templateVersionFile)
	if err != nil {
		panic(err)
	}

	file, err := os.Create("version.go")
	if err != nil {
		panic(err)
	}

	commitHash, err := getCommitHash()
	if err != nil {
		panic(err)
	}

	date, err := getDate()
	if err != nil {
		panic(err)
	}

	tag, err := getTag()
	if err != nil {
		panic(err)
	}

	if tag == "" {
		tag = "v0.0.1-dev"
	}

	data := Version{
		Version:    tag,
		CommitHash: commitHash,
		Date:       date,
	}

	if err := tmpl.ExecuteTemplate(file, "versionFile", data); err != nil {
		panic(err)
	}
}
